import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.SortedMap;

public class WordCount {
    List<String> myWordList;
    Map<String, Integer> myTreeMap;
    Map<String, Integer> myHashMap;

    public WordCount() {
        myWordList = new ArrayList<>();
        myTreeMap = new TreeMap<>();
        myHashMap = new HashMap<>();
    }

    public void readFile(File fileName) {
        Scanner scanner;
        try {
            scanner = new Scanner(fileName);
            while (scanner.hasNextLine()) {
                String[] line = scanner.nextLine().split("[ \n\t\r,.;:!?(){}}]");
                for (int i = 0; i < line.length; i++) {
                    myWordList.add(line[i].toLowerCase());
                }

            }
            System.out.println(myWordList.size());
        }
        catch (FileNotFoundException e) {
            System.out.println("File Not Found");
            e.printStackTrace();
        }

    }

    public void ToTreeMap() {
        for (int i = 0; i < myWordList.size(); i++) {
            String word = myWordList.get(i);
            if (myTreeMap.containsKey(word)) {
                int frequency = myTreeMap.get(word);
                frequency++;
                myTreeMap.put(word, frequency);
            }
            else {
                myTreeMap.put(word, 1);
            }
        }

    }

    public void ToHashMap() {

        for (int i = 0; i < myWordList.size(); i++) {
            String word = myWordList.get(i);
            if (myHashMap.containsKey(word)) {
                int frequency = myHashMap.get(word);
                frequency++;
                myHashMap.put(word, frequency);
            }
            else {
                myHashMap.put(word, 1);
            }
        }
    }

    public void topFrequencyTree(int n) {
        Iterator iterator = myTreeMap.keySet().iterator();
        int i = 0;
        while (iterator.hasNext() && i < n) {
            i++;
            System.out.println(iterator.next() + " " + myTreeMap.get(iterator.next()));
        }

    }

    public void topFrequencyHash(int n) {
        Iterator iterator = myHashMap.keySet().iterator();
        int i = 0;
        while (iterator.hasNext() && i < n) {
            i++;
            System.out.println(iterator.next() + " " + myHashMap.get(iterator.next()));
        }
    }
}
